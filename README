#########################################################################################
					README
#########################################################################################

1. Running file
	
	-load the script with -s, -l as argument on swipl followed by polynomial.pl

#########################################################################################

2. Definitions
	
	Script contains the following definitions:
	
	-pvars/1. 
		a list as argument,defines a list of usable variables
	
	-pvar/1.
		checks if argument is a var
	
	-power/1
		checks if a var is of the form 'letter' and 'letter^integer'
	
	-coefficient/1
		checks if argument is a number

	-delete_coefficient/2
		monomial as 1st argument. Useful to change monomials of the form
		0*x into 0, -1*x into -x, 1*x into x, does nothing on other monomials

	-add_coefficient/2
		monomial as 1st argument. Useful to change monomials of the form
		x into 1*x, -x into -1*x does nothing on other monomials

	-negativeMonomial/1
		monomial as argument, checks if a given monomial is negative
		uses add_coefficient of cases -x,x
	
	-monomial/1
		checks if argument is a monomial
	
	-polynomial/1
		checks recursively if argument is of the form P+M or P-M where 
		P is a Polynom and M a monomial

	-monomial_mult/3
		first 2 arguments as monomials ( 1st argument must be a scalar ).
		yields product of a scalar by a second monomial on third argument
	
	-monomial_add/3
		first 2 arguments as monomials
		yields the sum of a monomial by a second monomial on third argument

	-monom_add_polynom/3
		first argument is a list with a single monomial, second a list of monomials.
		Produces the result of adding that monomial to any of the monomials at 
		the list ( as second argument). Fails if it cannot add.
		
		!!Note!!:Check tested queries 

	##### 1 ####
	-poly2list/2
		transforms a list representing a polynomial (second
		argument) into a polynomial represented as an expression (first argu-
		ment) and vice-versa.

	###### 2 ######
	-simpoly_list/2
		simplifies a polynomial represented as a list (1st argument) into
		another polynomial as a list (2nd argument).

	-acc/3
		used to build a result list with simpoly_list
		1st argument the input list, second argument is an accumulator list,
		third argument the result of recursively applying monom_add_polynom
		on each monomial of the first list.
		monom_add_polynom adds a monomial to a list of monomials, if the operation
		fails the monomial to add is then put in the accumulator list. 
		Recursively
		repeats the operation until the 1st list is empty and second list is the
		result of simplifying the polynom

	#### 3 ###
	-simpoly/2
		simplifies a polynomial represented as an expression (1st argument)
		as another polynomial as an expression(2nd argument). 

	#### 4 #####
	-scalepoly/3
		multiplies one polynomial as expression (1st argument) by a scalar (2nd argument)
		resulting in a second polynomial. The two first arguments are as-
		sumed to be ground. The polynomial resulting from the sum is in
		simplified form.
		Uses scale/3 to perform the arithmetic operation

	-scale/3
		multiplies a scalar (2nd argument) by each monomial in a list (1st argument)
		third argument is the resulting list

	#### 5 ###
	-addpoly/3
		performs addition on two polynomes as expression (1st and second argument)
		it does so by appending the 1st and 2nd arguments turned lists and simplifies
		that list

	-append/3
		1st argument and 2nd argument lists to append, 3rd argument the resulting list 

#########################################################################################

3. Notes

	-a monomial is not described as having the form var*coefficient
	-monomials on degree 0 have addition and subtraction described
	-multiplication is describe on monomial(number)*monomial(X^Y) where Y>=1
	-scalars not described as a product of scalars or power of scalars 

#########################################################################################

